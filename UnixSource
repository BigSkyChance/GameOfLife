#include <iostream>

using namespace std;

#include <memory.h> // needed so we can use memset below
#include <stdlib.h> // needed so we can use system

int main () {
	const int NumCols (60);
	const int NumRows (60);
	char ans;
	bool CurrGen [NumRows + 2] [NumCols + 2];
	bool NextGen [NumRows + 2] [NumCols + 2];
	bool more = true;
	int Col;
	int Row;
	int x;
	int y;
	int Generation;
	int NumNeighbors;
	
	memset (CurrGen, 0, (NumRows + 2 )* (NumCols + 2) * sizeof (bool)); // mark entire array as false
	memset (NextGen,0,( NumRows + 2) * (NumCols  + 2)* sizeof (bool)); // mark entire array as false
	
	cout << "Welcome to Chancellors Game of life!\nThis is a simple game based on Conways Game of Life" << endl;
	cout << "In this game, you will place cells onto a board, where you place them is important for their survival!" << endl;
	cout << "Rules:\nA Cell Dies if he gets lonely, and only has 1 or no neighbor cells!\nIf the cell is overcrowded and has 4 neighbors, it dies :(" << endl;
	cout << "If three cells surround an empty space, a new cell is made in there!" << endl;
	cout << "\n\nYou are starting on a 60x60 grid, below you will enter the co-ordinates of your first 6 cells... god speed" << endl;
	
	
	for (int i = 0; i < 6; i++) {
		cout << "Enter X-Coord followed by Y-Coord seperated by a space for living cell " << i << endl;
		cin >> x;
		cin >> y;
		
		CurrGen[x][y] = 1;
	}
	
	// for (generation = 0; ; Generation ++)
	Generation = 0;
	
	do 
	{  
		cout << "Generation: " << Generation << endl << endl;
		//Display CurGen Array here
		
		for (Row = 1; Row <= NumRows; Row++) // Display Board
		{
			for (Col = 0; Col < NumCols; Col++) 
			{
				cout << (CurrGen [Row] [Col] ? 'o' : '_');
			}
			cout << endl;
		}
		
		// loop for each cell in boar
		//count living neighbors
		for (Row = 1; Row <= NumRows; Row++)
		{
			for ( Col = 1; Col <= NumCols; Col++)
			{
				NumNeighbors = 0;
				if (CurrGen [Row - 1] [Col - 1])
					NumNeighbors++;
				if (CurrGen [Row - 1] [Col - 0])
					NumNeighbors++;
				if (CurrGen [Row - 1] [Col + 1])
					NumNeighbors++;
				if (CurrGen [Row - 0] [Col + 1])
					NumNeighbors++;
				if (CurrGen [Row + 1] [Col + 1])
					NumNeighbors++;
				if (CurrGen [Row + 1] [Col + 0])
					NumNeighbors++;
				if (CurrGen [Row + 1] [Col - 1])
					NumNeighbors++;
				if (CurrGen [Row + 0] [Col - 1])
					NumNeighbors++;

				switch (NumNeighbors)
				{
					case 0:
						NextGen[Row][Col] = 0;
					case 1:
						NextGen[Row][Col] = 0;
						break;
					case 2:
						NextGen[Row][Col] = CurrGen[Row][Col];
						break;
					case 3:
						NextGen[Row][Col] = 1;
						break;
					case 4:
						NextGen[Row][Col] = 0;
					case 5:
						NextGen[Row][Col] = 0;
					case 6:
						NextGen[Row][Col] = 0;
					case 7:
						NextGen[Row][Col] = 0;
					case 8:
						NextGen[Row][Col] = 0;
						break;
					default:
						cout << "Internal error, please contact customer support" << endl;
				}
			}
		}
	
		copy(begin(NextGen), end(NextGen), begin(CurrGen));	//Copy NextGen to replace CurrGen here
		
		
		Generation++;
		
		cout << "Would you like to continue? y/n: ";
		cin >> ans;
		
		if (ans == 'y')
			more = true;
		if (ans == 'n')
			more = false;
		
		
		
		
	} while(more);
	
	cout << "Thanks for using the program" << endl;

	return 0;
}
